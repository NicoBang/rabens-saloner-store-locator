{% comment %}
  Store Locator Section
  Genskabt direkte fra din fil – pakket som Shopify section.
{% endcomment %}

<section class="store-locator" data-section-id="{{ section.id }}">
  <div class="prose text-center">
    <h1>{{ section.settings.heading }}</h1>
    <p class="subheading h6">{{ section.settings.subheading }}</p>
  </div>

  <div class="search-container">
    <div class="search-input-wrapper">
      {%- render 'icon' with 'search', width: 20 -%}
      <input type="text"
             class="search-input"
             id="searchInput-{{ section.id }}"
             placeholder="{{ section.settings.search_placeholder }}">
    </div>
    <select class="country-select" id="countrySelect-{{ section.id }}">
      <option value="">{{ section.settings.country_placeholder }}</option>
    </select>
  </div>

  <div class="filter-buttons">
    <button class="filter-btn active" onclick="filterStores('all', this)">Alle</button>
    <button class="filter-btn" onclick="filterStores('physical', this)">Fysiske butikker</button>
    <button class="filter-btn" onclick="filterStores('online', this)">Online butikker</button>
  </div>

  <div class="results-info" id="resultsInfo-{{ section.id }}"></div>
  <div id="storesContainer-{{ section.id }}"></div>
</section>

<style>
  * { margin: 0; padding: 0; box-sizing: border-box; }
  .store-locator {
    max-width: 1600px; margin: 0 auto; padding: 60px 20px;
    font-family: var(--heading-font-family);
    color: #111; line-height: 1.6;
  }
  
  .search-container {
    margin-top: 30px; display: flex; flex-wrap: wrap;
    gap: 15px; justify-content: center;
  }
  .search-input, .country-select {
    font-family: var(--text-font-family);
    padding: 10px 18px; border: 1px solid #ddd; border-radius: 0;
    font-size: 15px; background: #fff; min-width: 300px;
    transition: border-color 0.3s;
  }
  .search-input-wrapper { position: relative; display: inline-block; }

.search-input-wrapper .Icon--search-desktop {
  position: absolute;
  left: 12px;
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none;
  color: #999;
  width: 20px;   /* styr størrelse */
  height: 20px;
}

/* giv plads til ikonet i venstre side */
.search-input { padding-left: 40px; }
  .search-input:focus, .country-select:focus { border-color: #000; outline: none; }
  .filter-buttons {
    display: flex; gap: 12px; justify-content: center;
    margin: 40px 0; flex-wrap: wrap;
  }
  .filter-btn {
    background: #F5F5F5; color: #5f5f5f;
    padding: 8px 18px 4px;; border-radius: 20px; font-size: 12px;
    cursor: pointer; transition: all 0.3s ease;
  }
  .filter-btn.active { background: #111; color: #fff; }
  .results-info { margin-bottom: 30px; color: #555; font-size: 15px; text-align: center; }
  .stores-grid {
    display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 20px;
  }
  .store-card {
    border-top: 1px solid #eee; padding: 20px;
    background: #f5f5f5;
    display: flex; flex-direction: column; gap: 10px;
    justify-content: space-between;
    animation: fadeIn 0.4s ease;
  }
  .store-name {
    font-family: var(--heading-font-family);     
    font-size: 12px;
    letter-spacing: .1px;
    text-transform: uppercase;
    margin-bottom: 10px;
  }
  .store-info { font-family: var(--text-font-family); font-size: 12px; color: #444; }
  .store-info div { margin-bottom: 6px; }
  .store-info a {
    color: inherit;
  text-decoration: none;
    text-transform: uppercase; color: #111;
    padding-bottom: 2px;
    background:
    linear-gradient(
      to left,
      rgba(0, 0, 0, 1)
    ),
    linear-gradient(
      to left,
      rgba(255, 250, 250, 1)
  );
  background-size: 100% 1px, 0 1px;
  background-position: 0 100%, 100% 100%;
  background-repeat: no-repeat;
  transition: background-size 400ms;
  }
  .store-info a:hover { background-size: 0 1px, 100% 1px; }
  .store-badges { display: flex; gap: 14px; margin-top: 10px; }
  .sl_badge { font-size: 12px; text-transform: uppercase; letter-spacing: 0.5px; color: #666; }
  .error-message {
    background: #ffebee; color: #c62828; padding: 15px;
    border-radius: 4px; margin-bottom: 20px; text-align: center; font-weight: 500;
  }
  .no-results { text-align: center; padding: 50px 20px; color: #777; }
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to   { opacity: 1; transform: translateY(0); }
  }

</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/fuse.js/7.0.0/fuse.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const sectionId = "{{ section.id }}";
  const input = document.getElementById("searchInput-" + sectionId);
  const select = document.getElementById("countrySelect-" + sectionId);
  const resultsInfo = document.getElementById("resultsInfo-" + sectionId);
  const container = document.getElementById("storesContainer-" + sectionId);

  const CONFIG = {
    STORES_URL: (() => {
      const dataSource = '{{ section.settings.data_source | default: "auto" }}';
      
      if (dataSource === 'dk') {
        return 'https://cdn.jsdelivr.net/gh/NicoBang/rabens_saloner-store-locator@main/stores-dk.min.json';
      } else if (dataSource === 'int') {
        return 'https://cdn.jsdelivr.net/gh/NicoBang/rabens_saloner-store-locator@main/stores-int.min.json';
      } else if (dataSource === 'all') {
        return 'https://cdn.jsdelivr.net/gh/NicoBang/rabens_saloner-store-locator@main/stores-all.min.json';
      } else {
        // Auto-detect logic fra ovenstående
        const currentDomain = window.location.hostname;
        if (currentDomain.includes('rabenssaloner-dkk-da') || currentDomain.includes('.dk')) {
          return 'https://cdn.jsdelivr.net/gh/NicoBang/rabens_saloner-store-locator@main/stores-dk.min.json';
        } else if (currentDomain.includes('rabenssaloner.myshopify')) {
          return 'https://cdn.jsdelivr.net/gh/NicoBang/rabens_saloner-store-locator@main/stores-int.min.json';
        }
        return 'https://cdn.jsdelivr.net/gh/NicoBang/rabens_saloner-store-locator@main/stores-all.min.json';
      }
    })(),
    CACHE_DURATION: 3600000,
    SESSION_CACHE_KEY: 'storeLocatorData',
    LOCATION_CACHE_KEY: 'userLocation',
    COUNTRY_NAMES: {
      'DK':'Danmark','SE':'Sverige','NO':'Norge','DE':'Tyskland','NL':'Holland','BE':'Belgien','FR':'Frankrig',
      'GB':'Storbritannien','US':'USA','AT':'Østrig','CH':'Schweiz','IT':'Italien','ES':'Spanien','PL':'Polen',
      'CZ':'Tjekkiet','FI':'Finland','PT':'Portugal','IE':'Irland','LU':'Luxembourg','LT':'Litauen','LV':'Letland',
      'EE':'Estland','BG':'Bulgarien','RO':'Rumænien','HR':'Kroatien','HU':'Ungarn','EL':'Grækenland','MT':'Malta',
      'IS':'Island','FO':'Færøerne','GL':'Grønland','IL':'Israel','JP':'Japan','TW':'Taiwan'
    }
  };

  let allStores = [];
  let currentFilter = "all";
  let fuse;

  initializeStoreLocator();

  async function initializeStoreLocator() {
    await loadStores();
    initializeSearch();
    showStoresForUserCountry();
  }

  async function loadStores() {
    const response = await fetch(CONFIG.STORES_URL);
    const data = await response.json();
    allStores = Array.isArray(data) ? data : (data.stores || []);
    allStores = allStores.map(store => ({
      ...store,
      City: store.City ? store.City.trim() : "",
      Company: store.Company ? store.Company.trim() : "",
      Country: store.Country ? store.Country.trim() : ""
    }));
  }

  function initializeSearch() {
    fuse = new Fuse(allStores, {
      keys: ["City","Company","Postal Code","Address"],
      threshold: 0.4, distance: 100, minMatchCharLength: 2
    });
    input.addEventListener("input", debounce(searchStores, 200));
    select.addEventListener("change", searchStores);
    populateCountryDropdown();
  }

  function populateCountryDropdown() {
    const countries = {};
    allStores.forEach(s => { if(s.Country) countries[s.Country]=(countries[s.Country]||0)+1; });
    const sorted = Object.entries(countries).sort((a,b)=>b[1]-a[1]);
    select.innerHTML = '<option value="">{{ section.settings.country_placeholder }}</option>';
    sorted.forEach(([code,count]) => {
      const name = CONFIG.COUNTRY_NAMES[code]||code;
      select.innerHTML += `<option value="${code}">${name} (${count})</option>`;
    });
  }

  function showStoresForUserCountry(){ searchStores(); }

  function searchStores() {
    const term = input.value.trim();
    const country = select.value;
    let results = allStores;
    if (country) results = results.filter(s => s.Country===country);
    if (term) {
      if (/^\\d+$/.test(term)) {
        results = results.filter(s => s["Postal Code"] && s["Postal Code"].startsWith(term));
      } else {
        results = fuse.search(term).map(r=>r.item);
      }
    }
    if (currentFilter==="physical") results = results.filter(s => s.Physical==="X");
    if (currentFilter==="online") results = results.filter(s => s.Online==="X");
    displayStores(results);
  }

  window.filterStores = function(type, btn) {
    document.querySelectorAll(".filter-btn").forEach(b=>b.classList.remove("active"));
    btn.classList.add("active"); currentFilter=type; searchStores();
  };

  function displayStores(stores) {
    resultsInfo.textContent = stores.length===0 ? "Ingen butikker fundet" : stores.length + " butikker fundet";
    if (!stores.length) {
      container.innerHTML = "<div class='no-results'><h3>Ingen butikker fundet</h3><p>Prøv at ændre søgning</p></div>";
      return;
    }
    container.innerHTML = "<div class='stores-grid'>" + stores.map((s,i)=>`
      <div class="store-card" style="animation-delay:${i*0.05}s">
      <div class="part-one-wrapper">
        <div class="store-name">${s.Company||"Navn ikke tilgængeligt"}</div>
        <div class="store-info">
          ${s.Address?`<div>${s.Address}</div>`:""}
          ${s.City||s["Postal Code"]?`<div>${s["Postal Code"]||""} ${s.City||""}</div>`:""}
          ${s.Phone?`<div>${s.Phone}</div>`:""}
          <!-- ${s.Website?`<div><a href="${s.Website}" target="_blank">Besøg website</a></div>`:""} -->
          ${s.Address?`<div><a href="https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent((s.Address || '') + ', ' + (s["Postal Code"] || '') + ' ' + (s.City || ''))}" target="_blank">Få vejvisning</a></div>`:""}
        </div>
        </div>
        <div class="store-badges">
          ${s.Online==="X"?'<span class="sl_badge">Online</span>':""}
          ${s.Physical==="X"?'<span class="sl_badge">Fysisk butik</span>':""}
        </div>
      </div>`).join("")+"</div>";
  }

  function debounce(func, delay){let t;return function(...a){clearTimeout(t);t=setTimeout(()=>func.apply(this,a),delay)}}
});
</script>

{% schema %}
{
  "name": "Store Locator",
  "settings": [
    { "type": "text", "id": "heading", "label": "Overskrift", "default": "Find Forhandler" },
    { "type": "text", "id": "subheading", "label": "Undertekst", "default": "Find nærmeste forhandler eller søg efter by" },
    { "type": "text", "id": "search_placeholder", "label": "Søgefelt placeholder", "default": "Søg efter by, postnummer eller butiksnavn..." },
    { "type": "text", "id": "country_placeholder", "label": "Land-dropdown placeholder", "default": "Alle lande" },
    {
      "type": "select",
      "id": "data_source",
      "label": "Data kilde",
      "default": "auto",
      "options": [
        { "value": "auto", "label": "Auto-detect baseret på shop" },
        { "value": "dk", "label": "Kun DK stores" },
        { "value": "int", "label": "Kun INT stores" },
        { "value": "all", "label": "Alle stores" }
      ]
    }
  ],
  "presets": [{ "name": "Store Locator" }]
}
{% endschema %}